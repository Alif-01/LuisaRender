name: build

on: [ push, pull_request ]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04 ]
        gcc: [ 11, 12 ]
        llvm: [ 14, 15 ]
        compiler: [ gcc, clang ]
        config: [ Release, Debug ]
        exclude:
          - os: ubuntu-20.04
            gcc: 12
          - os: ubuntu-22.04
            gcc: 11
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }} / llvm-${{ matrix.llvm }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get -y install cmake
          sudo apt-get -y install gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }} build-essential ninja-build git file libopencv-dev uuid-dev libglfw3-dev libxinerama-dev libxcursor-dev libxi-dev
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.llvm }}
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: "Setup CUDA"
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          linux-local-args: '["--toolkit"]'
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export LUISA_CC=gcc-${{ matrix.gcc }}
            export LUISA_CXX=g++-${{ matrix.gcc }}
          else
            export LUISA_CC=clang-${{ matrix.llvm }}
            export LUISA_CXX=clang++-${{ matrix.llvm }}
          fi
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=${LUISA_CC} -D CMAKE_CXX_COMPILER=${LUISA_CXX} -D LLVM_ROOT=/usr/lib/llvm-${{ matrix.llvm }}
          cmake --build build

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-12 ]
        config: [ Release, Debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          brew install cmake ninja opencv llvm sccache glfw
      - name: "Configure and Build"
        run: |
          export PATH=/usr/local/opt/llvm/bin:$PATH
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          cmake --build build

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2022 ]
        config: [ Release, Debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Setup CUDA"
        uses: Jimver/cuda-toolkit@v0.2.8
      - name: "Setup Ninja"
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.10.2
      - name: "Configure and Build"
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -S . -G Ninja -B build -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER:FILEPATH=cl.exe -D CMAKE_CXX_COMPILER:FILEPATH=cl.exe
          cmake --build build
